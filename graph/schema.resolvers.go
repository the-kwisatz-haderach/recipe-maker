package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"

	"github.com/the-kwisatz-haderach/recipemaker/graph/model"
)

// CreateRecipe is the resolver for the createRecipe field.
func (r *mutationResolver) CreateRecipe(ctx context.Context, input model.RecipeInput) (*model.Recipe, error) {
	return r.Db.CreateRecipe(ctx, input.RecipeName)
}

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, input model.SignupInput) (*model.User, error) {
	u, _ := r.Db.FindUser(ctx, input.Username)
	if u != nil {
		return nil, errors.New("user already exists")
	}
	encryptedPass, err := r.Auth.HashPassword(ctx, input.Password)
	if err != nil {
		return nil, err
	}
	input.Password = string(encryptedPass)
	return r.Db.CreateUser(ctx, input)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input *model.LoginInput) (*model.User, error) {
	u, _ := r.Db.FindUser(ctx, input.Username)
	if u == nil {
		return nil, errors.New("invalid login credentials")
	}
	err := r.Auth.ComparePasswords(ctx, input.Password, []byte(u.Password))
	if err != nil {
		return nil, errors.New("invalid login credentials")
	}
	return u, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (*bool, error) {
	panic(fmt.Errorf("not implemented: Logout - logout"))
}

// Recipes is the resolver for the recipes field.
func (r *queryResolver) Recipes(ctx context.Context) ([]*model.Recipe, error) {
	panic(fmt.Errorf("not implemented: Recipes - recipes"))
}

// Recipe is the resolver for the recipe field.
func (r *queryResolver) Recipe(ctx context.Context, id int) (*model.Recipe, error) {
	panic(fmt.Errorf("not implemented: Recipe - recipe"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
