package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"

	"github.com/the-kwisatz-haderach/recipemaker/graph/model"
	"github.com/the-kwisatz-haderach/recipemaker/internal/authservice"
)

// AddRecipe is the resolver for the addRecipe field.
func (r *mutationResolver) AddRecipe(ctx context.Context, input model.AddRecipeInput) (*model.Recipe, error) {
	if user := authservice.GetUser(ctx); user == nil {
		return nil, errors.New("access denied")
	} else {
		return r.Db.AddRecipe(ctx, input, user.ID)
	}
}

// UpdateRecipe is the resolver for the updateRecipe field.
func (r *mutationResolver) UpdateRecipe(ctx context.Context, input model.UpdateRecipeInput) (*model.Recipe, error) {
	if user := authservice.GetUser(ctx); user == nil {
		return nil, errors.New("access denied")
	} else {
		return r.Db.UpdateRecipe(ctx, input)
	}
}

// AddIngredient is the resolver for the addIngredient field.
func (r *mutationResolver) AddIngredient(ctx context.Context, input model.AddIngredientInput) (*model.Ingredient, error) {
	if user := authservice.GetUser(ctx); user == nil {
		return nil, errors.New("access denied")
	} else {
		return r.Db.AddIngredient(ctx, input, user.ID)
	}
}

// AddPantryItem is the resolver for the addPantryItem field.
func (r *mutationResolver) AddPantryItem(ctx context.Context, input model.AddPantryItemInput) (*model.PantryItem, error) {
	if user := authservice.GetUser(ctx); user == nil {
		return nil, errors.New("access denied")
	} else {
		return r.Db.AddPantryItem(ctx, input, user.ID)
	}
}

// UpdatePantryItem is the resolver for the updatePantryItem field.
func (r *mutationResolver) UpdatePantryItem(ctx context.Context, input model.UpdatePantryItemInput) (*model.PantryItem, error) {
	if user := authservice.GetUser(ctx); user == nil {
		return nil, errors.New("access denied")
	} else {
		return r.Db.UpdatePantryItem(ctx, input)
	}
}

// Recipes is the resolver for the recipes field.
func (r *queryResolver) Recipes(ctx context.Context) ([]*model.Recipe, error) {
	if user := authservice.GetUser(ctx); user == nil {
		return nil, errors.New("access denied")
	} else {
		return r.Db.GetRecipes(ctx, user.ID)
	}
}

// Recipe is the resolver for the recipe field.
func (r *queryResolver) Recipe(ctx context.Context, id string) (*model.Recipe, error) {
	panic(fmt.Errorf("not implemented: Recipe - recipe"))
}

// Ingredients is the resolver for the ingredients field.
func (r *queryResolver) Ingredients(ctx context.Context) ([]*model.Ingredient, error) {
	if user := authservice.GetUser(ctx); user == nil {
		return nil, errors.New("access denied")
	} else {
		return r.Db.GetIngredients(ctx, user.ID)
	}
}

// Ingredient is the resolver for the ingredient field.
func (r *queryResolver) Ingredient(ctx context.Context, id string) (*model.Ingredient, error) {
	if user := authservice.GetUser(ctx); user == nil {
		return nil, errors.New("access denied")
	} else {
		return r.Db.GetIngredient(ctx, id)
	}
}

// PantryItems is the resolver for the pantryItems field.
func (r *queryResolver) PantryItems(ctx context.Context) ([]*model.PantryItem, error) {
	if user := authservice.GetUser(ctx); user == nil {
		return nil, errors.New("access denied")
	} else {
		return r.Db.GetPantryItems(ctx, user.ID)
	}
}

// PantryItem is the resolver for the pantryItem field.
func (r *queryResolver) PantryItem(ctx context.Context, id string) (*model.PantryItem, error) {
	panic(fmt.Errorf("not implemented: PantryItem - pantryItem"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
